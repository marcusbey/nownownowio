generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}

model User {
  id                    String                   @id @default(nanoid(11))
  name                  String?
  displayName           String?
  email                 String                   @unique
  emailVerified         DateTime?
  image                 String?
  bio                   String?
  resendContactId       String?
  passwordHash          String?
  widgetToken           String?
  websiteUrl            String?
  failedAttempts        Int                      @default(0)
  lockedUntil           DateTime?
  createdAt             DateTime                 @default(now())
  updatedAt             DateTime                 @updatedAt
  accounts              Account[]
  feedback              Feedback[]
  memberships           OrganizationMembership[]
  usage                 UserUsage[]
  bookmarks             Bookmark[]
  comments              Comment[]
  following             Follow[]                 @relation("Following")
  followers             Follow[]                 @relation("Followers")
  likes                 Like[]
  notificationsSent     Notification[]           @relation("Issuer")
  notificationsReceived Notification[]           @relation("Recipient")
  posts                 Post[]
  sessions              Session[]

  @@index([email, emailVerified])
  @@index([resendContactId])
  @@index([failedAttempts, lockedUntil])
  @@index([createdAt])
}

model Post {
  id             String         @id @default(nanoid(11))
  content        String
  title          String?        @db.VarChar(300)
  userId         String
  organizationId String?
  createdAt      DateTime       @default(now())
  isPinned       Boolean        @default(false)
  scheduledAt    DateTime?
  topic          String?    
  views          PostView[]
  bookmarks      Bookmark[]
  comments       Comment[]
  likes          Like[]
  notifications  Notification[]
  media          Media[]
  organization   Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([organizationId])
  @@index([createdAt])
  @@index([scheduledAt])
  @@map("posts")
}

model Comment {
  id        String   @id @default(nanoid(11))
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id     String @id @default(nanoid(11))
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Media {
  id        String    @id @default(nanoid(11))
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id])

  @@map("post_media")
}

model PostView {
  id       String   @id @default(nanoid(11))
  postId   String
  viewerId String
  clientIp String
  viewedAt DateTime @default(now())
  post     Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, viewerId, clientIp])
  @@index([postId])
  @@index([viewerId])
}

model UserUsage {
  id            String   @id @default(nanoid(11))
  userId        String
  date          DateTime @default(now())
  postsCount    Int      @default(0)
  commentsCount Int      @default(0)
  likesCount    Int      @default(0)
  mediaCount    Int      @default(0)
  user          User     @relation(fields: [userId], references: [id])

  @@unique([userId, date])
  @@index([date])
}

model Feedback {
  id        String   @id @default(nanoid(11))
  review    Int
  message   String
  email     String?
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User?    @relation(fields: [userId], references: [id])
}

enum MediaType {
  IMAGE
  VIDEO
}
