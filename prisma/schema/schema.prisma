// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_UNPOOLED")
}


model User {
  id              String    @id @default(nanoid(11))
  name            String?
  displayName     String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  bio             String?
  resendContactId String?
  passwordHash    String?
  widgetToken     String?
  websiteUrl      String?
  failedAttempts  Int       @default(0)
  lockedUntil     DateTime?

  // Core relationships
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  usage     UserUsage[]

  // Organization memberships
  memberships   OrganizationMembership[]

  // Auth relationships
  accounts      Account[]
  sessions      Session[]

  // Social relationships
  followers     Follow[]    @relation("Followers")
  following     Follow[]    @relation("Following")
  bookmarks     Bookmark[]
  feedback      Feedback[]

  // Notifications
  notificationsReceived Notification[] @relation("Recipient")
  notificationsSent    Notification[] @relation("Issuer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, emailVerified])
  @@index([resendContactId])
  @@index([failedAttempts, lockedUntil])
  @@index([createdAt])
}

model Post {
  id                  String         @id @default(nanoid(11))
  content             String
  title               String?        @db.VarChar(300)
  userId              String
  organizationId      String?
  organization        Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt           DateTime       @default(now())
  isPinned            Boolean        @default(false)
  scheduledAt         DateTime?
  comments            Comment[]
  likes               Like[]
  attachments         Media[]
  views               PostView[]
  bookmarks           Bookmark[]
  notifications       Notification[]
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
  @@index([userId])
  @@index([organizationId])
  @@index([createdAt])
  @@index([scheduledAt])
}

model Comment {
  id        String   @id @default(nanoid(11))
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id     String @id @default(nanoid(11))
  userId String
  postId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Media {
  id        String    @id @default(nanoid(11))
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id])

  @@map("post_media")
}

model PostView {
  id        String   @id @default(nanoid(11))
  postId    String
  viewerId  String
  clientIp  String   // To prevent multiple counts from same IP
  viewedAt  DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, viewerId, clientIp])
  @@index([postId])
  @@index([viewerId])
}



model UserUsage {
  id             String   @id @default(nanoid(11))
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  date           DateTime @default(now())
  postsCount     Int      @default(0)
  commentsCount  Int      @default(0)
  likesCount     Int      @default(0)
  mediaCount     Int      @default(0)
  
  @@unique([userId, date])
  @@index([date])
}

enum MediaType {
  IMAGE
  VIDEO
}



model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


