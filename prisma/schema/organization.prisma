model Organization {
  id               String                    @id @default(nanoid(11))
  name             String
  slug             String                    @unique @default(nanoid(6))
  email            String?
  websiteUrl       String?
  stripeCustomerId String?
  planId           String                    @default("FREE")
  image            String?
  bio              String?
  createdAt        DateTime                  @default(now())
  updatedAt        DateTime                  @updatedAt
  previousPlanId   String?
  planChangedAt    DateTime?                 @db.Timestamp(6)
  plan             OrganizationPlan          @relation(fields: [planId], references: [id], onDelete: Cascade)
  invitations      OrganizationInvitation[]
  members          OrganizationMembership[]
  planHistory      OrganizationPlanHistory[]
  posts            Post[]
  widgets          Widget[]

  @@index([slug])
  @@index([stripeCustomerId])
  @@index([createdAt])
}

model OrganizationInvitation {
  id             String       @id @default(nanoid(11))
  email          String
  token          String       @unique
  organizationId String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([email])
  @@index([token])
  @@index([organizationId])
  @@index([expiresAt])
}

model Widget {
  id             String       @id @default(nanoid(11))
  organizationId String
  widgetToken    String
  settings       Json?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@index([organizationId])
  @@index([createdAt])
}

model OrganizationMembership {
  id             String                       @id @default(nanoid(11))
  organizationId String
  userId         String
  roles          OrganizationMembershipRole[]
  organization   Organization                 @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User                         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model OrganizationPlan {
  id                String                    @id @default(nanoid(11))
  name              String
  type              OrganizationPlanType      @default(FREE)
  maximumMembers    Int                       @default(1)
  maxPostsPerDay    Int                       @default(5)
  maxCommentsPerDay Int                       @default(20)
  maxLikesPerDay    Int                       @default(100)
  maxMediaPerPost   Int                       @default(1)
  canSchedulePosts  Boolean                   @default(false)
  canPinPosts       Boolean                   @default(false)
  hasAnalytics      Boolean                   @default(false)
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  billingCycle      BillingCycle              @default(MONTHLY)
  organizations     Organization[]
  orgPlanHistory    OrganizationPlanHistory[]
  previousOrgPlans  OrganizationPlanHistory[] @relation("OrgPreviousPlanHistory")

  @@index([type])
}

model OrganizationPlanHistory {
  id             String            @id @default(nanoid(11))
  organizationId String
  planId         String
  previousPlanId String?
  changeType     String            @default("UPGRADE")
  startDate      DateTime          @default(now()) @db.Timestamp(6)
  endDate        DateTime?         @db.Timestamp(6)
  proratedAmount Int?
  notes          String?
  createdAt      DateTime          @default(now()) @db.Timestamp(6)
  organization   Organization      @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  plan           OrganizationPlan  @relation(fields: [planId], references: [id])
  previousPlan   OrganizationPlan? @relation("OrgPreviousPlanHistory", fields: [previousPlanId], references: [id])
}

enum OrganizationPlanType {
  FREE
  BASIC
  PRO
}

enum BillingCycle {
  MONTHLY
  ANNUAL
  LIFETIME
}

enum OrganizationMembershipRole {
  OWNER
  ADMIN
  MEMBER
}
