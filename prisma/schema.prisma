generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["prismaSchemaFolder"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(nanoid(11))
  name            String?
  displayName     String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  bio             String?
  resendContactId String?
  passwordHash    String?
  widgetToken     String?
  websiteUrl      String?
  failedAttempts  Int       @default(0)
  lockedUntil     DateTime?

  sessions      Session[]
  accounts      Account[]
  feedbacks     Feedback[]
  organizations OrganizationMembership[]

  posts     Post[]
  comments  Comment[]
  likes     Like[]
  bookmarks Bookmark[]

  following           Follow[]       @relation("Following")
  followers           Follow[]       @relation("Followers")
  notifications       Notification[] @relation("Recipient")
  issuedNotifications Notification[] @relation("Issuer")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([email, emailVerified])
  @@index([resendContactId])
  @@index([failedAttempts, lockedUntil])
  @@index([createdAt])
}

model Account {
  id                    String  @id @default(nanoid(11))
  userId                String
  type                  String
  provider              String
  providerAccountId     String
  refreshTokenExpiresIn String?
  refresh_token         String?
  access_token          String?
  expires_at            Int?
  token_type            String?
  scope                 String?
  id_token              String?
  session_state         String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId, provider])
  @@index([userId, expires_at])
  @@map("accounts")
}

model Session {
  id           String   @id @default(nanoid(11))
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) @map("created_at")

  @@index([userId, expires])
  @@index([expires])
  @@map("sessions")
}

model Organization {
  id               String    @id @default(nanoid(11))
  name             String
  slug             String    @unique
  email            String?
  websiteUrl       String?
  stripeCustomerId String?
  planId           String    @default("FREE")
  plan             OrganizationPlan @relation(fields: [planId], references: [id], onDelete: Cascade)
  image            String?
  members          OrganizationMembership[]
  invitations      OrganizationInvitation[]
  posts            Post[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@index([slug])
  @@index([stripeCustomerId])
  @@index([createdAt])
}

model OrganizationInvitation {
  id             String       @id @default(nanoid(11))
  email          String
  token          String       @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  expiresAt      DateTime
  createdAt      DateTime     @default(now())

  @@index([email])
  @@index([token])
  @@index([organizationId])
  @@index([expiresAt])
}

model OrganizationMembership {
  id             String                    @id @default(nanoid(11))
  organization   Organization              @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User                      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  roles          OrganizationMembershipRole[]

  @@unique([organizationId, userId])
  @@index([organizationId])
  @@index([userId])
}

model OrganizationPlan {
  id             String @id @default(nanoid(11))
  name           String
  maximumMembers Int    @default(1)

  organization Organization[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Feedback {
  id      String  @id @default(nanoid(11))
  review  Int
  message String
  email   String?
  userId  String?
  user    User?   @relation(fields: [userId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Follow {
  id          String @id @default(nanoid(11))
  followerId  String
  followingId String
  follower    User   @relation("Following", fields: [followerId], references: [id], onDelete: Cascade)
  following   User   @relation("Followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id                  String         @id @default(nanoid(11))
  content             String
  userId              String
  organizationId      String?
  organization        Organization?  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  createdAt           DateTime       @default(now())
  bookmarks           Bookmark[]
  comments            Comment[]
  likes               Like[]
  linkedNotifications Notification[]
  attachments         Media[]
  views               PostView[]
  user                User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("posts")
  @@index([userId])
  @@index([organizationId])
  @@index([createdAt])
}

model PostView {
  id        String   @id @default(nanoid(11))
  postId    String
  viewerId  String   // User ID or "anonymous" for non-logged-in users
  clientIp  String   // To prevent multiple counts from same IP
  viewedAt  DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([postId, viewerId, clientIp])
  @@index([postId])
  @@index([viewerId])
}

model Media {
  id        String    @id @default(nanoid(11))
  postId    String?
  type      MediaType
  url       String
  createdAt DateTime  @default(now())
  post      Post?     @relation(fields: [postId], references: [id])

  @@map("post_media")
}

model Comment {
  id        String   @id @default(nanoid(11))
  content   String
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id     String @id @default(nanoid(11))
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("likes")
}

model Bookmark {
  id        String   @id @default(nanoid(11))
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@map("bookmarks")
}

model Notification {
  id          String           @id @default(nanoid(11))
  recipientId String
  issuerId    String
  postId      String?
  type        NotificationType
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  issuer      User             @relation("Issuer", fields: [issuerId], references: [id], onDelete: Cascade)
  post        Post?            @relation(fields: [postId], references: [id], onDelete: Cascade)
  recipient   User             @relation("Recipient", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  data       Json?    // Added optional JSON field for storing additional data

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum MediaType {
  IMAGE
  VIDEO
}

enum NotificationType {
  LIKE
  FOLLOW
  COMMENT
}

enum OrganizationMembershipRole {
  OWNER
  ADMIN
  MEMBER
}
