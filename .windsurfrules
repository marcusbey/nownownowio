# [NownownowIo]

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.
Staart the output with "Marcus" at the beginning of the output an also specify with rull you are applying.

## Project Context
Project Overview: This is a modern social media platform built with organization-centric features. It's designed to facilitate communication and content sharing within organizations while maintaining a social network feel.

Tech Stack:

Frontend:
Next.js 15+ with App Router
TypeScript
TailwindCSS for styling
Radix UI for accessible components
React Query for data fetching and caching
NextAuth.js for authentication
Backend:
PostgreSQL database
Prisma as the ORM
Next.js API routes
Stripe integration for payments
UploadThing for file uploads
Architecture:

Database Schema:
prisma
CopyInsert
// Core Models
User {
  id, name, displayName, email, emailVerified
  image, bio, widgetToken, passwordHash
  organizations (through Membership)
  posts, comments, likes, bookmarks
  followers, following, notifications
}

Organization {
  id, name, slug, image, email
  websiteUrl, stripeCustomerId
  planId, members (through Membership)
}

Post {
  id, content, userId
  media, comments, likes, bookmarks
  notifications
}

// Join Models
Membership {
  roles: [OWNER, ADMIN, MEMBER]
  userId, organizationId
}

// Supporting Models
PostMedia, Comment, Like, Bookmark
Notification, Follow, OrganizationPlan
Key Features:
Organization-based membership system
Role-based access control (OWNER, ADMIN, MEMBER)
Social features (posts, comments, likes, follows)
Media sharing (images, videos)
Real-time notifications
Subscription plans (Free, Premium)
Routing Structure:
/orgs/[orgSlug]/* - Organization-specific routes
/u/[username] - Public user profiles
/posts/[postId] - Individual post views
/account/* - User account management
User Experience:

Authentication & Organizations:
Users can sign up/login with email or OAuth
Users must be part of an organization
Organizations can have multiple members with different roles
Premium organizations can have more members
Social Features:
Users can create posts with text and media
Posts can be liked, commented on, and bookmarked
Users can follow each other
Real-time notifications for social interactions
Profile System:
Users have both personal and organizational profiles
Customizable display names and avatars
Bio and personal information
Activity feed showing posts and interactions
Navigation:
Organization-specific navigation
Explore feed for discovering content
Notification center
Bookmarks section
Settings and account management
Premium Features:
Increased member limits
Additional organization features
Enhanced media capabilities
Key Components:

Post.tsx: Core component for displaying posts
User information with avatar
Post content and media
Social interaction buttons
Links to user profiles and post details
Organization Management:
Member invitation system
Role management
Subscription handling
Organization settings
Feed System:
Infinite scrolling
Real-time updates
Filtered views (organization, user, explore)
This is a sophisticated platform that combines social networking features with organizational structure, making it suitable for both internal company communication and public social interaction while maintaining proper access control and user management.

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)

## Project Statistics

- Total files: 499

## Folder Structure

```
.cursorignore
.eslintrc.json
.gitignore
.nvmrc
.prettierignore
.prettierrc.yaml
CHANGELOG.md
README.md
app
  (layout)
    layout.tsx
    legal
      privacy
        page.tsx
      terms
        page.tsx
    payment
      cancel
        page.tsx
      success
        page.tsx
    posts
      [slug]
        PostSlugMetadataImage.tsx
        error.tsx
        loading.tsx
        opengraph-image.tsx
        page.tsx
        twitter-image.tsx
      categories
        [category]
          page.tsx
      loading.tsx
      page.tsx
  (logged-in)
    (account-layout)
      AccountNavigation.tsx
      account
        (settings)
          EditPasswordForm.tsx
          EditProfileForm.tsx
          edit-profile.action.ts
          edit-profile.schema.ts
          loading.tsx
          page.tsx
        danger
          confirm
            page.tsx
          delete-account.action.ts
          loading.tsx
          page.tsx
        email
          ToggleEmailCheckbox.tsx
          loading.tsx
          mail-account.action.ts
          page.tsx
        layout.tsx
        loading.tsx
        verify-email
          VerifyEmailButton.tsx
          page.tsx
          verify-email.action.ts
      account-links.tsx
      error.tsx
      layout.tsx
    error.tsx
    not-found.tsx
  @modal
    (.)auth
      ProviderButton.tsx
      signin
        SignInDialog.tsx
        page.tsx
      signup
        SignUpDialog.tsx
        page.tsx
    default.tsx
    loading.tsx
  api
    auth
      [...nextauth]
        route.ts
      logout
        route.ts
    bookmarks
      [id]
        route.ts
      route.ts
    clear-uploads
      route.ts
    comments
      [commentId]
        route.ts
    get-token
      route.ts
    messages
      unread-count
        route.ts
    notifications
      mark-as-read
        route.ts
      route.ts
      unread-count
        route.ts
    org
      [orgId]
        route.ts
    posts
      [postId]
        bookmark
          route.ts
        comments
          route.ts
        likes
          route.ts
        views
          route.ts
      bookmarked
        route.ts
      check
        route.ts
      check-views
        route.ts
      following
        route.ts
      for-you
        route.ts
      test-view
        route.ts
    search
      route.ts
    uploadthing
      core.ts
      route.ts
    users
      [userId]
        followers
          route.ts
        posts
          route.ts
      name
        [name]
          route.ts
    webhooks
      resend
        route.ts
      stripe
        findUserFromCustomer.ts
        premium.helper.ts
        route.ts
        webhooks.stripe.utils.ts
    widget
      generate-script
        route.ts
      user-info
        route.ts
      user-posts
        route.ts
  apple-icon.png
  auth
    ProviderButton.tsx
    error
      auth-error-mapping.ts
      page.tsx
    error.tsx
    new-user
      page.tsx
    signin
      MagicLinkForm.tsx
      SignInCredentialsAndMagicLinkForm.tsx
      SignInProviders.tsx
      page.tsx
    signout
      page.tsx
    signup
      SignUpCredentialsForm.tsx
      SignUpProviders.tsx
      page.tsx
      signup.action.ts
      signup.schema.ts
    verify-request
      page.tsx
  bookmarks
    BookmarksList.tsx
    page.tsx
  code-theme.scss
  components
    BookmarkButton.tsx
  error.tsx
  favicon.ico
  global-error.tsx
  globals.scss
  icon.png
  landing
    LandingPage.tsx
  layout.tsx
  manifest.ts
  no-orgs
    AddProjectForm.tsx
    action.ts
    page.tsx
  not-found.tsx
  orgs
    [orgSlug]
      (navigation)
        FollowingFeed.tsx
        ForYouFeed.tsx
        InformationCards.tsx
        MessagesButton.tsx
        NotificationsButton.tsx
        SubscribersChart.tsx
        _navigation
          OrgCommand.tsx
          OrgLinks.tsx
          OrgNavigation.tsx
          OrgsSelect.tsx
          UpgradeCard.tsx
          org-navigation.links.ts
        bookmarks
          Bookmarks.tsx
          page.tsx
        dashboard
          page.tsx
        error.tsx
        explore
          SearchResults.tsx
          metadata.ts
          page.tsx
        layout.tsx
        loading.tsx
        messages
          Chat.tsx
          ChatChannel.tsx
          ChatSidebar.tsx
          NewChatDialog.tsx
          page.tsx
          useInitializeChatClient.ts
        not-found.tsx
        notifications
          Notification.tsx
          Notifications.tsx
          page.tsx
        page.tsx
        posts
          [postId]
            page.tsx
        profile
          ClientProfile.tsx
          EditProfileButton.tsx
          EditProfileDialog.tsx
          MyPostsFeed.tsx
          ProfileHeader.tsx
          UserPosts.tsx
          actions.ts
          mutations.ts
          page.tsx
        settings
          (details)
            OrgDetailsForm.tsx
          billing
            page.tsx
          danger
            OrgDangerForm.tsx
            OrganizationDeleteDialog.tsx
            delete-org.action.ts
            page.tsx
          layout.tsx
          loading.tsx
          members
            OrgInviteMemberForm.tsx
            OrgMembersForm.tsx
            page.tsx
          org.action.ts
          org.schema.ts
          page.tsx
          widget
            GenerateScript.tsx
            GenerateScriptButton.tsx
            WidgetSettingsForm.tsx
            loading.tsx
            page.tsx
        users
          ClientOrg.tsx
          donuts-chart.tsx
          page.tsx
          users-chart.tsx
      invitations
        [token]
          page.tsx
      layout.tsx
      useCurrentOrg.tsx
    error.tsx
    new
      NewOrgForm.tsx
      new-org.action.ts
      new-org.schema.ts
      page.tsx
    not-found.tsx
    route.ts
  page.tsx
  pages
    _document.tsx
  providers.tsx
  sitemap.tsx
  users
    [name]
      UserPosts.tsx
      page.tsx
components.json
content
  posts
    2024-02-13_demo.mdx
emails
  AccountAskDeletion.email.tsx
  AccountConfirmDeletion.email.tsx
  MagicLinkEmail.email.tsx
  Markdown.email.tsx
  OrgConfirmDeletion.email.tsx
  OrganizationInvitationEmail.email.tsx
  SubscriptionDowngradeEmail.email.tsx
  SubscriptionFailedEmail.email.tsx
  SuccessUpgradeEmail.email.tsx
  VerifyEmail.email.tsx
  utils
    EmailLayout.tsx
    components.utils.tsx
eslint.config.mjs
jest.config.js
knip.json
middleware.ts
next-env.d.ts
next.config.js
package.json
pnpm-lock.yaml
postcss.config.js
prisma
  migrations
    20240906153924_initial_migration
      migration.sql
    20240906153933_initial_plan
      migration.sql
    20240907152852_add_slug_to_organization
      migration.sql
    20240917175828_adding_website_lin
      migration.sql
    20240918141458_update_schema
      migration.sql
    20240918152259_update_schema_display_name
      migration.sql
    20240918153909_add_bio_to_user
      migration.sql
    20240925085019_add_widgettoken_to_user
      migration.sql
    20241203022425_add_account_lockout_fields
      migration.sql
    add_post_views.sql
    migration_lock.toml
  schema
    next-auth.prisma
    organization.prisma
  schema.prisma
public
  fonts
    Geist-Black.otf
    Geist-Bold.otf
    Geist-SemiBold.otf
    clash-display.woff2
  images
    avatar-placeholder.png
    hero.png
    icon.png
    romainboboe.jpeg
  logo.png
  next.svg
  vercel.svg
scripts
  check-db.ts
  check-users.ts
  merge-accounts.ts
  merge-my-accounts.ts
  test-auth-perf.ts
  test-auth.sh
  test-auth.ts
src
  app
    api
      posts
        [postId]
          views
            route.ts
      profile
        route.ts
    explore
      layout.tsx
      page.tsx
      people
        page.tsx
    layout.tsx
    page.tsx
  assets
    avatar-placeholder.png
    login-image.jpg
    signup-image.jpg
  components
    CropImageDialog.tsx
    FollowButton.tsx
    FollowerCount.tsx
    InfiniteScrollContainer.tsx
    Linkify.tsx
    LoadingButton.tsx
    PasswordInput.tsx
    SearchField.tsx
    TrendsSidebar.tsx
    UserAvatar.tsx
    UserLinkWithTooltip.tsx
    UserTooltip.tsx
    comments
      Comment.tsx
      CommentInput.tsx
      CommentMoreButton.tsx
      Comments.tsx
      DeleteCommentDialog.tsx
      actions.ts
      mutations.ts
    posts
      BookmarkButton.tsx
      DeletePostDialog.tsx
      LikeButton.tsx
      MediaPreview.tsx
      Post.tsx
      PostComposer.tsx
      PostMoreButton.tsx
      PostsLoadingSkeleton.tsx
      actions.ts
      editor
        PostEditor.tsx
        actions.ts
        base-social-app.code-workspace
        mutations.ts
        styles.css
        useMediaUpload.ts
      mutations.ts
    svg
      CircleSvg.tsx
      DotPattern.tsx
      LogoSvg.tsx
      UnderlineSvg.tsx
    ui
      Bento.tsx
      SignUpProviders.tsx
      accordion.tsx
      alert-dialog.tsx
      alert.tsx
      aspect-ratio.tsx
      avatar.tsx
      badge.tsx
      button.tsx
      calendar.tsx
      card.tsx
      chart.tsx
      checkbox.tsx
      command.tsx
      dialog.tsx
      divider.tsx
      dropdown-menu.tsx
      form.tsx
      input.tsx
      keyboard-shortcut.tsx
      label.tsx
      loader.tsx
      multi-select.tsx
      popover.tsx
      progress.tsx
      scroll-area.tsx
      select.tsx
      separator.tsx
      sheet.tsx
      skeleton.tsx
      sonner.tsx
      switch.tsx
      table.tsx
      tabs.tsx
      textarea.tsx
      toast.tsx
      toaster.tsx
      toggle.tsx
      tooltip.tsx
      typography.tsx
      use-toast.ts
    utils
      ErrorBoundaries.tsx
      TailwindIndicator.tsx
  config.ts
  features
    alert-dialog
      AlertDialogRenderedDialog.tsx
      AlertDialogRenderer.tsx
      alert-dialog-store.ts
    auth
      AuthButton.tsx
      AuthButtonClient.tsx
      SignInButton.tsx
      UserDropdown.tsx
    contact
      feedback
        ContactFeedbackPopover.tsx
        contact-feedback.action.ts
        contact-feedback.schema.ts
      support
        ContactSupportDialog.tsx
        contact-support.action.ts
        contact-support.schema.ts
    email
      EmailForm.tsx
      EmailFormSection.tsx
      email.action.ts
      email.schema.ts
    explore
      PeopleExplore.tsx
    form
      FormUnsavedBar.tsx
      SubmitButton.tsx
    global-dialog
      GlobalDialog.tsx
      GlobalDialogLazy.tsx
      GlobalDialogStore.ts
      OrgPlanDialog.tsx
    images
      ImageFormItem.tsx
      NativeTargetBox.tsx
      upload-image.action.ts
    landing
      BentoSection.tsx
      FAQSection.tsx
      FeatureSection.tsx
      FeaturesPreviewSection.tsx
      Hero.tsx
      LandingHeader.tsx
      Pain.tsx
      SectionDivider.tsx
      SectionLayout.tsx
      StatsSection.tsx
      cta
        CTACardSection.tsx
        CTAImageSection.tsx
        CTASection.tsx
      review
        ReviewGrid.tsx
        ReviewItem.tsx
        ReviewSingle.tsx
        ReviewSmall.tsx
        ReviewTriple.tsx
    layout
      BaseLayout.tsx
      Footer.tsx
      Header.tsx
      HeaderBase.tsx
      HeaderLogo.tsx
      SettingsNavigation.tsx
    legal
      FloatingLegalFooter.tsx
    markdown
      ClientMarkdown.tsx
      ServerMdx.tsx
      markdown.config.ts
    navigation
      LogInNavigationWrapper.tsx
      MobileBottomMenu.tsx
      NavigationWrapper.tsx
      navigation.type.ts
      navigationElements.tsx
    page
      NextTopLoader.tsx
      Page400.tsx
      Page404.tsx
      layout.tsx
    plans
      PricingCard.tsx
      PricingSection.tsx
      plans.ts
    posts
      PostCard.tsx
      calculate-reading-time.ts
      post-manager.ts
    searchparams-message
      SearchParamsMessageToast.tsx
      createSearchParamsMessageUrl.ts
    stripe
      BuyButton.tsx
      buy-button.action.ts
    theme
      ThemeToggle.tsx
  hooks
    useDebounce.ts
    useFollowerInfo.ts
    useIsClient.ts
    useMatchingPathname.ts
    usePostViews.ts
    useProfile.ts
    useWarnIfUnsavedChanges.ts
  lib
    actions
      actions-utils.ts
      safe-actions.ts
    ai.ts
    api
      comments.ts
      ip.ts
      posts.ts
    auth
      auth-config-setup.ts
      auth-monitoring.ts
      auth.const.ts
      auth.ts
      credentials-provider.ts
      getNextAuthConfigProviders.ts
      helper.ts
      oauth-optimizations.ts
      oauth-service.ts
      performance-monitor.ts
      provider-refresh.ts
      redirects.ts
    cache
      auth-cache.ts
      query-cache.ts
    cache.ts
    cors.ts
    env.ts
    format
      date.ts
      displayName.ts
      id.ts
    ky.ts
    logger.ts
    mail
      resend.ts
      sendEmail.ts
    metadata.ts
    now-widget.ts
    og-image-font.ts
    organizations
      getOrg.ts
      isInRoles.ts
      reservedSlugs.ts
    prisma
      connection-manager.ts
      prisma.org.extends.ts
      prisma.user.extends.ts
    prisma.ts
    rateLimit.ts
    react
      cache.ts
    safe-route.ts
    schemas
      userData.schema.ts
    server-url.ts
    stream.ts
    stripe.ts
    types.ts
    uploadthing.ts
    utils
      compression.ts
      profile.ts
    utils.ts
    validation.ts
  middleware.ts
  nextauth.d.ts
  query
    org
      get-orgs-members.ts
      get-users-orgs.query.ts
      org-create.query.ts
      org-delete.query.ts
  site-config.ts
  styles
    scroll.module.css
  types
    config.ts
    next.ts
tailwind.config.js
tsconfig.json

```


## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions


## State Management
- Use React Context for global state when needed
- Implement proper state persistence using chrome.storage (for extension)
- Implement proper cleanup in useEffect hooks

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- Follow Material Design guidelines for Chrome extensions
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Chrome extension security best practices
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog