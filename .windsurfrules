# [NownownowIo]

Every time you choose to apply a rule(s), explicitly state the rule(s) in the output. You can abbreviate the rule description to a single word or phrase.
Staart the output with "Marcus" at the beginning of the output an also specify with rull you are applying.

## Project Context
Project Overview: This is a modern social media platform built with organization-centric features. It's designed to facilitate communication and content sharing within organizations while maintaining a social network feel.

Tech Stack:

Frontend:
Next.js 15+ with App Router
TypeScript
TailwindCSS for styling
Radix UI for accessible components
React Query for data fetching and caching
NextAuth.js for authentication
Backend:
PostgreSQL database
Prisma as the ORM
Next.js API routes
Stripe integration for payments
UploadThing for file uploads
Architecture:

Database Schema:
prisma
CopyInsert
// Core Models
User {
  id, name, displayName, email, emailVerified
  image, bio, widgetToken, passwordHash
  organizations (through Membership)
  posts, comments, likes, bookmarks
  followers, following, notifications
}

Organization {
  id, name, slug, image, email
  websiteUrl, stripeCustomerId
  planId, members (through Membership)
}

Post {
  id, content, userId
  media, comments, likes, bookmarks
  notifications
}

// Join Models
Membership {
  roles: [OWNER, ADMIN, MEMBER]
  userId, organizationId
}

// Supporting Models
PostMedia, Comment, Like, Bookmark
Notification, Follow, OrganizationPlan
Key Features:
Organization-based membership system
Role-based access control (OWNER, ADMIN, MEMBER)
Social features (posts, comments, likes, follows)
Media sharing (images, videos)
Real-time notifications
Subscription plans (Free, Premium)
Routing Structure:
/orgs/[orgSlug]/* - Organization-specific routes
/u/[username] - Public user profiles
/posts/[postId] - Individual post views
/account/* - User account management
User Experience:

Authentication & Organizations:
Users can sign up/login with email or OAuth
Users must be part of an organization
Organizations can have multiple members with different roles
Premium organizations can have more members
Social Features:
Users can create posts with text and media
Posts can be liked, commented on, and bookmarked
Users can follow each other
Real-time notifications for social interactions
Profile System:
Users have both personal and organizational profiles
Customizable display names and avatars
Bio and personal information
Activity feed showing posts and interactions
Navigation:
Organization-specific navigation
Explore feed for discovering content
Notification center
Bookmarks section
Settings and account management
Premium Features:
Increased member limits
Additional organization features
Enhanced media capabilities
Key Components:

Post.tsx: Core component for displaying posts
User information with avatar
Post content and media
Social interaction buttons
Links to user profiles and post details
Organization Management:
Member invitation system
Role management
Subscription handling
Organization settings
Feed System:
Infinite scrolling
Real-time updates
Filtered views (organization, user, explore)
This is a sophisticated platform that combines social networking features with organizational structure, making it suitable for both internal company communication and public social interaction while maintaining proper access control and user management.

## Code Style and Structure
- Write concise, technical TypeScript code with accurate examples
- Use functional and declarative programming patterns; avoid classes
- Prefer iteration and modularization over code duplication
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError)

## Project Statistics

- Total files: 505

## Folder Structure
Check the fiel structure in the latest file inthe 'tree-maker' repo

## Naming Conventions
- Use lowercase with dashes for directories (e.g., components/form-wizard)
- Favor named exports for components and utilities
- Use PascalCase for component files (e.g., VisaForm.tsx)
- Use camelCase for utility files (e.g., formValidator.ts)

## TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types
- Avoid enums; use const objects with 'as const' assertion
- Use functional components with TypeScript interfaces
- Define strict types for message passing between different parts of the extension
- Use absolute imports for all files @/...
- Avoid try/catch blocks unless there's good reason to translate or handle error in that abstraction
- Use explicit return types for all functions


## State Management
- Use React Context for global state when needed
- Implement proper state persistence using chrome.storage (for extension)
- Implement proper cleanup in useEffect hooks

## Syntax and Formatting
- Use "function" keyword for pure functions
- Avoid unnecessary curly braces in conditionals
- Use declarative JSX
- Implement proper TypeScript discriminated unions for message types

## UI and Styling
- Use Shadcn UI and Radix for components
- use `npx shadcn@latest add <component-name>` to add new shadcn components
- Implement Tailwind CSS for styling
- Consider extension-specific constraints (popup dimensions, permissions)
- Follow Material Design guidelines for Chrome extensions
- When adding new shadcn component, document the installation command

## Error Handling
- Implement proper error boundaries
- Log errors appropriately for debugging
- Provide user-friendly error messages
- Handle network failures gracefully

## Refactoring
- Alway refer to the code structure before refactoring
- Refactor only when necessary
- Don't remove comments
- Don't remove working features and functionality  or anything that my case bigger issues or rabit whole corrections. 
- Don't break existing features and functionality
- Make sure the refactoring is consistent with the code structure and won't create new issues.
- only change what is necessary. 

## Testing
- Write unit tests for utilities and components
- Implement E2E tests for critical flows
- Test across different Chrome versions
- Test memory usage and performance

## Security
- Implement Content Security Policy
- Sanitize user inputs
- Handle sensitive data properly
- Follow Chrome extension security best practices
- Implement proper CORS handling

## Git Usage
Commit Message Prefixes:
- "fix:" for bug fixes
- "feat:" for new features
- "perf:" for performance improvements
- "docs:" for documentation changes
- "style:" for formatting changes
- "refactor:" for code refactoring
- "test:" for adding missing tests
- "chore:" for maintenance tasks

Rules:
- Use lowercase for commit messages
- Keep the summary line concise
- Include description for non-obvious changes
- Reference issue numbers when applicable

## Documentation
- Maintain clear README with setup instructions
- Document API interactions and data flows
- Keep manifest.json well-documented
- Don't include comments unless it's for complex logic
- Document permission requirements

## Development Workflow
- Use proper version control
- Implement proper code review process
- Test in multiple environments
- Follow semantic versioning for releases
- Maintain changelog